@inject IJSRuntime JSRuntime
<MudTable Items="@cache" Hover="true" Breakpoint="Breakpoint.Sm" Style="Height:100%;overflow-y:scroll;">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudToolBarSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" 
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Region</MudTh>
        <MudTh>Confirmed</MudTh>
        <MudTh>Deaths</MudTh>
        <MudTh>Recovered</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Region">@context.Name</MudTd>
        <MudTd DataLabel="Confirmed">@context.Details.Confirmed</MudTd>
        <MudTd DataLabel="Deaths">@context.Details.Deaths</MudTd>
        <MudTd DataLabel="Recovered">@context.Details.Recovered</MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public Map MapContainer { get; set; }
    [Parameter] public Chart ChartContainer { get; set; }
    [Parameter] public IEnumerable<Region> regions {get; set;}
    [Parameter] public IEnumerable<Region> cache {get; set;}
    public string searchString = null;

    private async Task OnSearch(string text)
    {
        await JSRuntime.InvokeAsync<Task>("console.log", (object)text);
        searchString = text;
        cache = from region in regions where region.Name.Contains(searchString) select region;
        StateHasChanged();
        ChartContainer.Populate(filter : text);
        if(cache.Count() == 1) {
            await MapContainer.Tack(text);
        }
    }
}
